"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º TgSpyBot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiogram 3.x –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
"""
import asyncio
from typing import Dict, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from loguru import logger

from app.config.settings import settings
from app.parser.telegram_parser import TelegramParser
from app.storage.redis_storage import RedisStorage


class BotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è FSM"""
    waiting_for_password = State()
    authenticated = State()


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    def __init__(self, parser: TelegramParser):
        self.bot = Bot(token=settings.bot.token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.parser = parser
        self.storage = RedisStorage()
        self.authorized_users: Dict[int, bool] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.dp.message.middleware.register(self._auth_middleware)
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self._cmd_start, Command("start"))
        self.dp.message.register(self._cmd_help, Command("help"))
        self.dp.message.register(self._handle_password, StateFilter(BotStates.waiting_for_password))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
        self.dp.message.register(self._cmd_addchat, Command("addchat"))
        self.dp.message.register(self._cmd_removechat, Command("removechat"))
        self.dp.message.register(self._cmd_listchats, Command("listchats"))
        self.dp.message.register(self._cmd_keywords, Command("keywords"))
        self.dp.message.register(self._cmd_setkeywords, Command("setkeywords"))
        self.dp.message.register(self._cmd_status, Command("status"))
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self._handle_unknown)
    
    async def _auth_middleware(self, handler, event: types.Message, data: dict):
        """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user_id = event.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id != settings.bot.admin_user_id:
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not self.authorized_users.get(user_id, False):
            # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if event.text and (event.text.startswith('/start') or event.text.startswith('/help')):
                return await handler(event, data)
            
            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
            state = data.get('state')
            if state and await state.get_state() == BotStates.waiting_for_password:
                return await handler(event, data)
            
            await event.answer("üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return
        
        return await handler(event, data)
    
    async def _cmd_start(self, message: types.Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = message.from_user.id
        
        if self.authorized_users.get(user_id, False):
            await message.answer(
                "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
            return
        
        await message.answer(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TgSpyBot!\n\n"
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
        )
        await state.set_state(BotStates.waiting_for_password)
    
    async def _handle_password(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
        user_id = message.from_user.id
        password = message.text.strip()
        
        if password == settings.bot.password:
            self.authorized_users[user_id] = True
            await state.set_state(BotStates.authenticated)
            
            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                "üéØ TgSpyBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥."
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            try:
                await message.delete()
            except:
                pass
                
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def _cmd_help(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
ü§ñ **TgSpyBot - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**

üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏:**
‚Ä¢ `/addchat <—Å—Å—ã–ª–∫–∞>` - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ `/removechat <—Å—Å—ã–ª–∫–∞>` - —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞  
‚Ä¢ `/listchats` - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤

üîç **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**
‚Ä¢ `/keywords` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ `/setkeywords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞

‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞:**
‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

---
**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**

`/addchat @durov`
`/addchat https://t.me/cryptonews`  
`/setkeywords –±–∏—Ç–∫–æ–∏–Ω, —ç—Ñ–∏—Ä, –ø—Ä–æ–¥–∞–º, –∫—É–ø–ª—é`
        """
        
        await message.answer(help_text, parse_mode="Markdown")
    
    async def _cmd_addchat(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /addchat"""
        args = message.text.split(maxsplit=1)
        
        if len(args) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç.\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "`/addchat @channel_name`\n"
                "`/addchat https://t.me/channel_name`",
                parse_mode="Markdown"
            )
            return
        
        chat_link = args[1].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤
        current_chats = self.parser.get_monitored_chats()
        if len(current_chats) >= settings.parser.max_chats:
            await message.answer(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ ({settings.parser.max_chats}).\n"
                "–£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ —á–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /removechat"
            )
            return
        
        await message.answer("‚è≥ –î–æ–±–∞–≤–ª—è—é —á–∞—Ç...")
        
        success = await self.parser.add_chat(chat_link)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.storage.save_monitored_chats(self.parser.get_monitored_chats())
            
            await message.answer(
                f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: `{chat_link}`\n"
                f"üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(self.parser.get_monitored_chats())}",
                parse_mode="Markdown"
            )
            
            logger.info(f"–ß–∞—Ç {chat_link} –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç.\n\n"
                "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                "‚Ä¢ –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
                "‚Ä¢ –ß–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                parse_mode="Markdown"
            )
    
    async def _cmd_removechat(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /removechat"""
        args = message.text.split(maxsplit=1)
        
        if len(args) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "`/removechat @channel_name`",
                parse_mode="Markdown"
            )
            return
        
        chat_link = args[1].strip()
        
        success = await self.parser.remove_chat(chat_link)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.storage.save_monitored_chats(self.parser.get_monitored_chats())
            
            await message.answer(
                f"‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: `{chat_link}`\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å —á–∞—Ç–æ–≤: {len(self.parser.get_monitored_chats())}",
                parse_mode="Markdown"
            )
            
            logger.info(f"–ß–∞—Ç {chat_link} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        else:
            await message.answer(
                f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listchats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤."
            )
    
    async def _cmd_listchats(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /listchats"""
        chats = self.parser.get_monitored_chats()
        
        if not chats:
            await message.answer(
                "üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addchat –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤."
            )
            return
        
        chat_list = "üìã **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:**\n\n"
        
        for i, (username, info) in enumerate(chats.items(), 1):
            chat_list += f"{i}. **{info['title']}**\n"
            chat_list += f"   üîó @{username}\n"
            chat_list += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {info['added_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        
        chat_list += f"üìä **–í—Å–µ–≥–æ —á–∞—Ç–æ–≤:** {len(chats)}/{settings.parser.max_chats}"
        
        await message.answer(chat_list, parse_mode="Markdown")
    
    async def _cmd_keywords(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /keywords"""
        keywords = self.parser.keywords
        
        if not keywords:
            await message.answer(
                "üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkeywords –¥–ª—è –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return
        
        keywords_text = "üîç **–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**\n\n"
        for i, keyword in enumerate(keywords, 1):
            keywords_text += f"{i}. `{keyword}`\n"
        
        keywords_text += f"\nüìä **–í—Å–µ–≥–æ:** {len(keywords)} —Å–ª–æ–≤"
        
        await message.answer(keywords_text, parse_mode="Markdown")
    
    async def _cmd_setkeywords(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /setkeywords"""
        args = message.text.split(maxsplit=1)
        
        if len(args) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "`/setkeywords –±–∏—Ç–∫–æ–∏–Ω, —ç—Ñ–∏—Ä, –ø—Ä–æ–¥–∞–º, –∫—É–ø–ª—é`",
                parse_mode="Markdown"
            )
            return
        
        keywords_str = args[1].strip()
        keywords = [kw.strip().lower() for kw in keywords_str.split(",") if kw.strip()]
        
        if not keywords:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
            return
        
        self.parser.set_keywords(keywords)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.storage.save_keywords(keywords)
        
        keywords_text = "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\nüîç **–ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**\n"
        for i, keyword in enumerate(keywords, 1):
            keywords_text += f"{i}. `{keyword}`\n"
        
        await message.answer(keywords_text, parse_mode="Markdown")
        
        logger.info(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}: {keywords}")
    
    async def _cmd_status(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        is_running = self.parser.is_running
        chats = self.parser.get_monitored_chats()
        keywords = self.parser.keywords
        
        status_text = "üìä **–°—Ç–∞—Ç—É—Å TgSpyBot**\n\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
        if is_running:
            status_text += "üü¢ **–ü–∞—Ä—Å–µ—Ä:** –†–∞–±–æ—Ç–∞–µ—Ç\n"
        else:
            status_text += "üî¥ **–ü–∞—Ä—Å–µ—Ä:** –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        status_text += f"üìã **–ß–∞—Ç–æ–≤:** {len(chats)}/{settings.parser.max_chats}\n"
        status_text += f"üîç **–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:** {len(keywords)}\n"
        status_text += f"‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:** {settings.parser.check_interval} —Å–µ–∫\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —á–∞—Ç–∞–º
        if chats:
            status_text += "üìà **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:**\n"
            for username, info in list(chats.items())[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                status_text += f"‚Ä¢ {info['title']} (@{username})\n"
            
            if len(chats) > 3:
                status_text += f"‚Ä¢ ... –µ—â—ë {len(chats) - 3} —á–∞—Ç–æ–≤\n"
        else:
            status_text += "üì≠ **–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã**\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if keywords:
            status_text += f"\nüîç **–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º:** {', '.join(keywords[:5])}"
            if len(keywords) > 5:
                status_text += f" (+{len(keywords) - 5})"
        else:
            status_text += "\n‚ùå **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã**"
        
        await message.answer(status_text, parse_mode="Markdown")
    
    async def _handle_unknown(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    async def send_notification(self, message_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = self._format_bot_notification(message_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self.bot.send_message(
                chat_id=settings.bot.admin_user_id,
                text=notification,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
            if settings.notification.chat_id:
                await self.bot.send_message(
                    chat_id=settings.notification.chat_id,
                    text=notification,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
                
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message_data['chat_title']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _format_bot_notification(self, message_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Telegram"""
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = message_data['message_text']
        if len(message_text) > 300:
            message_text = message_text[:300] + "..."
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        message_text = message_text.replace('`', '\\`').replace('*', '\\*').replace('_', '\\_')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = message_data['date'].strftime("%d.%m.%Y %H:%M:%S")
        
        notification = f"""üîî **–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É!**

üì¢ **–ß–∞—Ç:** {message_data['chat_title']}
üÜî **–°—Å—ã–ª–∫–∞:** https://t.me/{message_data['chat_username']}
‚úâÔ∏è **–°–æ–æ–±—â–µ–Ω–∏–µ:** 
```
{message_text}
```
üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(message_data['found_keywords'])}
‚è∞ **–í—Ä–µ–º—è:** {date_str}"""
        
        return notification
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await self.storage.initialize()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await self._load_saved_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞—Ä—Å–µ—Ä
        self.parser.add_message_handler(self.send_notification)
        
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        await self.bot.session.close()
        await self.storage.close()
    
    async def _load_saved_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = await self.storage.load_keywords()
            if keywords:
                self.parser.set_keywords(keywords)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã
            chats = await self.storage.load_monitored_chats()
            if chats:
                self.parser.monitored_chats = chats
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —á–∞—Ç—ã: {list(chats.keys())}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}") 