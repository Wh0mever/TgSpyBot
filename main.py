#!/usr/bin/env python3
"""
TgSpyBot - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Telegram –±–æ—Ç–æ–º
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
import asyncio
import signal
import sys
from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.parser.telegram_parser import TelegramParser
from app.bot.telegram_bot import TelegramBot
from app.utils.logger import setup_logger
from app.utils.notification_handler import console_handler, file_handler, database_handler
from app.config.settings import settings


class TgSpyBotApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TgSpyBot"""
    
    def __init__(self):
        self.parser = TelegramParser()
        self.bot = TelegramBot(self.parser)
        self.is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ TgSpyBot - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
            logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞...")
            if not await self.parser.initialize():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.parser.add_message_handler(console_handler.handle_found_message)
            self.parser.add_message_handler(file_handler.handle_found_message)
            self.parser.add_message_handler(database_handler.handle_found_message)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self._show_startup_info()
            
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            parser_task = asyncio.create_task(self.parser.start_monitoring())
            bot_task = asyncio.create_task(self.bot.start())
            
            logger.info("‚úÖ TgSpyBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –±–æ—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [parser_task, bot_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await self.stop()
            
        return True
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_running:
            return
            
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TgSpyBot...")
        self.is_running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self.parser.stop_monitoring()
            await self.bot.stop()
            await self.parser.disconnect()
            
            logger.info("‚úÖ TgSpyBot —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    def _show_startup_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
        logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        logger.info(f"   üì± Telegram Phone: {settings.telegram.phone}")
        logger.info(f"   ü§ñ Bot ID: {settings.bot.token.split(':')[0]}")
        logger.info(f"   üë§ Admin ID: {settings.bot.admin_user_id}")
        logger.info(f"   üí¨ Notification Chat: {settings.notification.chat_id}")
        logger.info(f"   üîç Keywords: {settings.parser.keywords}")
        logger.info(f"   ‚è∞ Check Interval: {settings.parser.check_interval}s")
        logger.info(f"   üìä Max Chats: {settings.parser.max_chats}")
        logger.info(f"   üóÑÔ∏è Database: {settings.database.type}")
        
        if settings.database.type == "redis":
            logger.info(f"   üìç Redis: {settings.database.redis_host}:{settings.database.redis_port}")
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            "parser_running": self.parser.is_running,
            "parser_connected": self.parser.client is not None,
            "monitored_chats": len(self.parser.get_monitored_chats()),
            "keywords_count": len(self.parser.keywords),
        }
        return status


async def setup_signal_handlers(app: TgSpyBotApp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        asyncio.create_task(app.stop())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)   # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # Termination
    
    # –î–ª—è Windows
    if sys.platform == "win32":
        signal.signal(signal.SIGBREAK, signal_handler)


async def validate_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    if not settings.telegram.api_id:
        errors.append("TELEGRAM_API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not settings.telegram.api_hash:
        errors.append("TELEGRAM_API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not settings.telegram.phone:
        errors.append("TELEGRAM_PHONE –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    if not settings.bot.token:
        errors.append("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not settings.bot.password:
        errors.append("BOT_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not settings.bot.admin_user_id:
        errors.append("ADMIN_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if settings.database.type == "redis":
        try:
            import redis.asyncio as redis
            r = redis.Redis(
                host=settings.database.redis_host,
                port=settings.database.redis_port,
                password=settings.database.redis_password
            )
            await r.ping()
            await r.close()
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    
    if errors:
        logger.error("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in errors:
            logger.error(f"   ‚Ä¢ {error}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              TgSpyBot v1.0                   ‚ïë
‚ïë     –ü–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π Telegram —Å –±–æ—Ç–æ–º       ‚ïë
‚ïë           —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TgSpyBot...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not await validate_configuration():
        logger.error("‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = TgSpyBotApp()
    await setup_signal_handlers(app)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        success = await app.start()
        
        if success:
            logger.info("TgSpyBot –∑–∞–≤–µ—Ä—à–µ–Ω —à—Ç–∞—Ç–Ω–æ")
        else:
            logger.error("TgSpyBot –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except KeyboardInterrupt:
        logger.info("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã TgSpyBot")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1) 