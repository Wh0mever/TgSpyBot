#!/usr/bin/env python3
"""
MVP —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ TgSpyBot
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""
import asyncio
import signal
import sys
from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from app.parser.telegram_parser import TelegramParser
from app.utils.notification_handler import console_handler, file_handler
from app.utils.logger import setup_logger
from app.config.settings import settings


class MVPBot:
    """–ü—Ä–æ—Å—Ç–æ–π MVP –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self):
        self.parser = TelegramParser()
        self.is_running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ MVP –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ TgSpyBot MVP")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        if not await self.parser.initialize():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.parser.add_message_handler(console_handler.handle_found_message)
        self.parser.add_message_handler(file_handler.handle_found_message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._show_settings()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        await self._setup_test_chats()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.is_running = True
        try:
            await self.parser.start_monitoring()
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TgSpyBot MVP")
        self.is_running = False
        await self.parser.stop_monitoring()
        await self.parser.disconnect()
    
    def _show_settings(self):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        logger.info("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {settings.telegram.phone}")
        logger.info(f"   üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {settings.parser.keywords}")
        logger.info(f"   ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.parser.check_interval} —Å–µ–∫")
        logger.info(f"   üìä –ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤: {settings.parser.max_chats}")
    
    async def _setup_test_chats(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤"""
        if not self.parser.get_monitored_chats():
            logger.info("üìã –ß–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã")
            logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ add_chat() –∏–ª–∏ —á–µ—Ä–µ–∑ –±—É–¥—É—â–∏–π –±–æ—Ç")
            
            # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
            # await self.parser.add_chat("@test_channel")
    
    async def add_test_chat(self, chat_link: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞: {chat_link}")
        success = await self.parser.add_chat(chat_link)
        if success:
            logger.info(f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
        return success
    
    def set_test_keywords(self, keywords_str: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        keywords = [kw.strip() for kw in keywords_str.split(",") if kw.strip()]
        self.parser.set_keywords(keywords)
        logger.info(f"üîç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è MVP —Ç–µ—Å—Ç–∞"""
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           TgSpyBot MVP Test v1.0             ‚ïë
‚ïë        –ü–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π Telegram            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not hasattr(settings.telegram, 'api_id') or not settings.telegram.api_id:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_API_ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            logger.info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return
            
        if not hasattr(settings.telegram, 'api_hash') or not settings.telegram.api_hash:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_API_HASH –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º MVP –±–æ—Ç–∞
    mvp_bot = MVPBot()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        asyncio.create_task(mvp_bot.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await mvp_bot.start()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("MVP —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main()) 